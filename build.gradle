buildscript {
	repositories {
		maven{
			url "http://maven.aliyun.com/nexus/content/groups/public"
		}
		mavenCentral()
		jcenter()
	}
	dependencies {
      classpath 'com.sourcemuse.gradle.plugin:gradle-mongo-plugin:0.13.0'
    }
}
plugins {
	//gradle release -Prelease.useAutomaticVersion=true -Prelease.releaseVersion=1.0.0-release -Prelease.newVersion=1.0.1-SNAPSHOT
    id 'net.researchgate.release' version '2.4.0'
}
apply plugin: 'java'

def loadGroovyConfig(p){
		def configFile = file("environment.groovy")
		def profile = System.getenv("profile")
		new ConfigSlurper(p ? p : (profile ? profile : "test")).parse(configFile.toURL()).toProperties()
}


configure(subprojects) { project ->
	apply plugin: "java"
	apply plugin: "maven"
	
	repositories {
		maven{
			url "http://maven.aliyun.com/nexus/content/groups/public"
		}
		mavenCentral()
	}
	// put default properties
	loadGroovyConfig("base").each{ k, v -> ext.set(k,v) }
	// put profile properties default is test
	loadGroovyConfig(null).each{ k, v -> ext.set(k,v) }
	
	ext{
		junitVersion = "4.12"
		jpaVersion = "1.0.0.Final"
		springDataJpaVersion = "1.10.4.RELEASE"
		springMongodbVersion = "1.9.3.RELEASE"
		springVersion = "4.2.8.RELEASE"
		slf4jVersion = "1.7.21"
		commonsLangVersion = "3.4"
		commonsCollectionsVersion = "4.1"
		guavaVersion = "19.0"
		disruptorVersion = "3.3.4"
		jacksonVersion = "2.8.3"
		logbackVersion = "1.1.7"
	}
	compileJava.options.encoding = ext["encoding"]
	compileTestJava.options.encoding = ext["encoding"]
	
	dependencies{
		testCompile ("junit:junit:${junitVersion}")
	}
	task sourcesJar(type: Jar, dependsOn: classes) {
	    classifier = 'sources'
	    from sourceSets.main.allSource
	}
	
	artifacts {
	    archives sourcesJar
	}
	
	//deploy to maven nexus
	uploadArchives {
	    repositories {
	       mavenDeployer {
             repository(url: "http://nexus.ggxueche.cn/nexus/content/repositories/releases") {
            	 authentication(userName: "", password: "")
			 }
			 snapshotRepository(url: "http://nexus.ggxueche.cn/nexus/content/repositories/snapshots") {
                 authentication(userName: "", password: "")  
             }  
	       }
	    }
	}
	
	test{
		testLogging{
			showStandardStreams  = true
		}
	}
	
	build.dependsOn install
	rootProject.tasks.afterReleaseBuild.dependsOn uploadArchives
}


project(":appsugar-bean"){
	dependencies{
		compileOnly ("org.springframework.data:spring-data-commons:1.12.2.RELEASE")
		compileOnly ("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final")
	}
}

project(":appsugar-test"){
	dependencies{
		compile ("junit:junit:${junitVersion}")
		compile ("ch.qos.logback:logback-classic:${logbackVersion}")
		compile ("org.springframework:spring-test:${springVersion}")
		compile ("org.springframework:spring-context:${springVersion}")
	}
}

project(":appsugar-commons"){
	dependencies{
		compile ("com.lmax:disruptor:${disruptorVersion}")
		compile("com.google.guava:guava:${guavaVersion}")
	}
}

project(":appsugar-data-common"){
	dependencies{
		compile project(":appsugar-bean")
		compile("org.apache.commons:commons-lang3:${commonsLangVersion}")
		compile("org.apache.commons:commons-collections4:${commonsCollectionsVersion}")
		compile("com.google.guava:guava:${guavaVersion}")
		compileOnly ("org.springframework.data:spring-data-commons:1.12.2.RELEASE")
	}
}
project(":appsugar-data-jpa"){
	dependencies{
		compile project(":appsugar-data-common")
		compile("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:${jpaVersion}")
		compile("org.springframework.data:spring-data-jpa:${springDataJpaVersion}")
	}
}

project(":appsugar-data-mongodb"){
	apply plugin: 'mongo'
	dependencies{
		compile project(":appsugar-data-common")
		compile ("org.springframework.data:spring-data-mongodb:${springMongodbVersion}")
		compileOnly ("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
		compileOnly ("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
		testCompile ("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
		testCompile ("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
		testCompile project(":appsugar-test")
	}
	mongo {
	    port 27017
	    logging 'console'
	}
	test {
		runWithMongoDb = true
	    systemProperties = [
	            refreshDb: true
	    ]
	}
}

project(":appsugar-service"){
	dependencies{
		compile project(":appsugar-data-jpa")
		compileOnly("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:${jpaVersion}")
		compileOnly("org.springframework.data:spring-data-jpa:${springDataJpaVersion}")
	}
}

